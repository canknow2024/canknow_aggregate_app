name: Build iOS

on:
  push:
    branches:
      - main
      - master
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    env:
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2

      - name: Get dependencies
        run: flutter pub get

      - name: Check signing files
        run: |
          echo "检查签名文件..."
          
          # 检查证书文件
          if [ ! -f "ios/signing/ios_distribution.p12" ]; then
            echo "❌ 错误: 缺少 ios_distribution.p12 文件"
            echo ""
            echo "解决方案:"
            echo "1. 从 Apple Developer 网站获取 iOS Distribution 证书"
            echo "2. 将证书导出为 .p12 格式（包含私钥）"
            echo "3. 设置密码"
            echo "4. 将文件重命名为 ios_distribution.p12 并放入 ios/signing/ 目录"
            echo "5. 在 GitHub Secrets 中配置 P12_PASSWORD 环境变量"
            echo ""
            echo "详细步骤请参考: ios/signing/README.md"
            exit 1
          fi
          
          # 检查描述文件
          if [ ! -f "ios/signing/AdHoc.mobileprovision" ]; then
            echo "❌ 错误: 缺少 AdHoc.mobileprovision 文件"
            echo ""
            echo "解决方案:"
            echo "1. 在 Apple Developer 网站创建 AdHoc 类型的 Provisioning Profile"
            echo "2. 选择正确的 App ID 和证书"
            echo "3. 添加需要安装 App 的设备 UDID"
            echo "4. 下载描述文件并重命名为 AdHoc.mobileprovision"
            echo ""
            echo "详细步骤请参考: ios/signing/README.md"
            exit 1
          fi
          
          echo "✅ 签名文件检查通过"

      - name: Import signing certificate
        run: |
          security import ios/signing/ios_distribution.p12 -k ~/Library/Keychains/login.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign

      - name: Copy provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios/signing/AdHoc.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Build iOS
        run: flutter build ios --release

      - name: Build Archive
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace -scheme Runner -configuration Release -archivePath ${{ github.workspace }}/build/Runner.xcarchive archive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive -archivePath ${{ github.workspace }}/build/Runner.xcarchive -exportOptionsPlist signing/ExportOptions.plist -exportPath ${{ github.workspace }}/build/ios

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: build/ios/*.ipa